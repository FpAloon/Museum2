# Generated by Django 3.2.16 on 2022-12-03 23:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('blog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RecordPost',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField()),
                ('created_date', models.DateTimeField()),
                ('published_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'record_post',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RecordTest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField()),
                ('created_date', models.DateTimeField()),
                ('published_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'record_test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Wh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField()),
                ('txt', models.TextField()),
                ('dat', models.DateField()),
                ('url', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'wh',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='deliverer_person',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('фамилия', models.TextField(db_column='Фамилия')),
                ('имя', models.TextField(db_column='Имя')),
                ('отчество', models.TextField(db_column='Отчество')),
                ('паспортные_данные', models.IntegerField(db_column='Паспортные данные')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'сдатчик(человек)',
            },
        ),
        migrations.CreateModel(
            name='delivery_item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_сдатчика', models.IntegerField(db_column='id сдатчика')),
            ],
            options={
                'db_table': 'предмет - сдатчик',
            },
        ),
        migrations.CreateModel(
            name='exhibition',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('название', models.TextField(db_column='Название')),
                ('место', models.IntegerField(db_column='Место')),
                ('год', models.DateField(db_column='Год')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'выставка',
            },
        ),
        migrations.CreateModel(
            name='group',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('наименование', models.TextField(db_column='Наименование')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'группа',
            },
        ),
        migrations.CreateModel(
            name='inventory_book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('инвентарный_номер', models.TextField(db_column='Инвентарный номер')),
                ('номер_книги_поступления', models.IntegerField(db_column='Номер книги поступления')),
                ('сохранность', models.TextField(db_column='Сохранность')),
                ('материал_field', models.TextField(db_column='Материал(*)')),
                ('техника_field', models.TextField(db_column='Техника(*)')),
                ('количество_листов', models.IntegerField(db_column='Количество листов')),
                ('нуждается_ли_в_реставрации', models.IntegerField(db_column='Нуждается ли в реставрации')),
                ('условия_хранения', models.TextField(db_column='Условия хранения')),
                ('внешний_вид', models.IntegerField(db_column='Внешний вид')),
                ('сканы_для_текстовых_материалов_field', models.IntegerField(db_column='Сканы(для текстовых материалов)')),
            ],
            options={
                'db_table': 'инвентарная книга',
            },
        ),
        migrations.CreateModel(
            name='learning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('инвентарный_номер', models.TextField(db_column='Инвентарный номер')),
                ('легенда', models.TextField(db_column='Легенда')),
                ('персоналии_field', models.TextField(db_column='Персоналии(*)')),
                ('тематические_группы_field', models.IntegerField(db_column='Тематические группы(*)')),
                ('публикации_источники_информации_о_предмете_field', models.TextField(db_column='Публикации(источники информации о предмете)')),
                ('публикации_выступления_и_др_field', models.TextField(db_column='Публикации(выступления и др)')),
                ('участие_в_выставках', models.IntegerField(db_column='участие в выставках')),
            ],
            options={
                'db_table': 'изучение',
            },
        ),
        migrations.CreateModel(
            name='material',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('наименование', models.TextField(db_column='Наименование')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'материал',
            },
        ),
        migrations.CreateModel(
            name='organization',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('наименование', models.IntegerField(db_column='Наименование')),
                ('id_представителя', models.IntegerField(db_column='id представителя')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'организация',
            },
        ),
        migrations.CreateModel(
            name='person',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('фамилия', models.TextField(db_column='Фамилия')),
                ('имя', models.TextField(db_column='Имя')),
                ('отчество', models.TextField(db_column='Отчество')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'персона',
            },
        ),
        migrations.CreateModel(
            name='photo',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('название', models.TextField(db_column='Название')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'фото',
            },
        ),
        migrations.CreateModel(
            name='photo_subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_фото', models.IntegerField(db_column='id фото')),
            ],
            options={
                'db_table': 'фото-предмет',
            },
        ),
        migrations.CreateModel(
            name='publication',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('название', models.TextField(db_column='Название')),
                ('издание', models.TextField(db_column='Издание')),
                ('издательство', models.TextField(db_column='Издательство')),
                ('год', models.DateField(db_column='Год')),
            ],
            options={
                'db_table': 'публикация',
            },
        ),
        migrations.CreateModel(
            name='publication_printed',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('название', models.TextField(db_column='Название')),
                ('издание', models.TextField(db_column='Издание')),
                ('издательство', models.TextField(db_column='Издательство')),
                ('год', models.DateField(db_column='Год')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'публикация(печатная)',
            },
        ),
        migrations.CreateModel(
            name='publication_speech',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('название', models.TextField(db_column='Название')),
                ('мероприятие', models.TextField(db_column='Мероприятие')),
                ('секция', models.TextField(db_column='Секция')),
                ('дата', models.DateField(db_column='Дата')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'публикация(выступление)',
            },
        ),
        migrations.CreateModel(
            name='receipt_book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_номер_field', models.IntegerField(db_column='id(Номер)')),
                ('название', models.TextField(db_column='Название')),
                ('дата_поступления', models.DateField(db_column='Дата поступления')),
                ('сдатчик_field', models.IntegerField(db_column='Сдатчик(*)')),
                ('датировка_дата_изготовления_нач_field', models.DateField(db_column='Датировка(дата изготовления)(нач)')),
                ('датировка_дата_изготовления_кон_field', models.DateField(db_column='Датировка(дата изготовления)(кон)')),
                ('размер_длина_field', models.IntegerField(db_column='Размер(длина)')),
                ('размер_ширина_field', models.IntegerField(db_column='Размер(ширина)')),
                ('размер_высота_field', models.IntegerField(db_column='Размер(высота)')),
                ('описание', models.TextField(db_column='Описание')),
                ('изображение_аватар_field', models.IntegerField(db_column='Изображение(аватар)(*)')),
                ('закупка_безвозмездная_передача', models.IntegerField(db_column='Закупка/безвозмездная передача')),
                ('акт_поступления_ссылка_на_документ_field', models.TextField(db_column='Акт поступления (ссылка на документ)')),
            ],
            options={
                'db_table': 'книга поступлений',
            },
        ),
        migrations.CreateModel(
            name='scan',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('ссылка_на_скан', models.CharField(db_column='Ссылка на скан', max_length=16000)),
                ('примечание_текст', models.TextField(db_column='Примечание/текст')),
            ],
            options={
                'db_table': 'скан',
            },
        ),
        migrations.CreateModel(
            name='subject_exhibition_source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_выставки', models.IntegerField(db_column='id Выставки')),
            ],
            options={
                'db_table': 'предмет - выставка(источник)',
            },
        ),
        migrations.CreateModel(
            name='subject_group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_группы', models.IntegerField(db_column='id группы')),
            ],
            options={
                'db_table': 'предмет - группа',
            },
        ),
        migrations.CreateModel(
            name='subject_material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_материала', models.IntegerField(db_column='id материала')),
            ],
            options={
                'db_table': 'предмет - материал',
            },
        ),
        migrations.CreateModel(
            name='subject_person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_персоны', models.IntegerField(db_column='id Персоны')),
            ],
            options={
                'db_table': 'предмет - персона',
            },
        ),
        migrations.CreateModel(
            name='subject_publication_source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_публикации', models.IntegerField(db_column='id Публикации')),
                ('место_в_публикации', models.IntegerField(db_column='Место в публикации')),
            ],
            options={
                'db_table': 'предмет - публикация(источник)',
            },
        ),
        migrations.CreateModel(
            name='subject_publication_speeches',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_публикации', models.IntegerField(db_column='id Публикации')),
                ('место_в_публикации', models.IntegerField(db_column='Место в публикации')),
            ],
            options={
                'db_table': 'предмет - публикация(выступления)',
            },
        ),
        migrations.CreateModel(
            name='subject_scan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_скана', models.IntegerField(db_column='id скана')),
            ],
            options={
                'db_table': 'предмет - скан',
            },
        ),
        migrations.CreateModel(
            name='subject_technique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_из_книги_поступлений', models.IntegerField(db_column='id из книги поступлений')),
                ('id_техники', models.IntegerField(db_column='id техники')),
            ],
            options={
                'db_table': 'предмет - техника',
            },
        ),
        migrations.CreateModel(
            name='technic',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('наименование', models.TextField(db_column='Наименование')),
                ('примечание', models.TextField(db_column='Примечание')),
            ],
            options={
                'db_table': 'техника',
            },
        ),
        migrations.CreateModel(
            name='test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
